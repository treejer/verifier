name: Deploy Verifier App to GCR
on:
  push:
    branches:
      - gcpize
      - dev
      - main

env:
  PROJECT_ID: ${{ secrets.GCR_PROJECT }}
  RUN_REGION: ${{ secrets.GCR_REGION }}
jobs:
  setup:
    name: Setup Enviroment - ${{ github.ref }}
    runs-on: ubuntu-latest
    outputs:
      SERVICE_NAME: ${{ steps.set-vars.outputs.SERVICE_NAME }}
      ENVIRONMENT: ${{ steps.set-vars.outputs.ENVIRONMENT }}
    steps:
      - name: Set variables
        id: set-vars
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "SERVICE_NAME=verifier" >> "$GITHUB_OUTPUT"
            echo "ENVIRONMENT=MAIN" >> "$GITHUB_OUTPUT"
          else
            echo "SERVICE_NAME=verifier-dev" >> "$GITHUB_OUTPUT"
            echo "ENVIRONMENT=DEV" >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: setup
    name: Build Verifier App - ${{ needs.setup.outputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.setup.outputs.ENVIRONMENT }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js (NPM)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Use cached node_modules
        uses: actions/cache@master
        with:
          path: node_modules
          key: nodeModules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            nodeModules-
      - name: Install dependencies
        run: npm install --force
        env:
          CI: true

      - name: Build Development
        run: npm run build
        env:
          CI: true
          PORT: ${{ secrets.PORT }}
          CHOKIDAR_USEPOLLING: ${{ secrets.CHOKIDAR_USEPOLLING }}
          REACT_APP_WALLET_CONNECT_PROJECT_ID: ${{ secrets.REACT_APP_WALLET_CONNECT_PROJECT_ID }}
          REACT_APP_ALCHEMY_ID: ${{ secrets.REACT_APP_ALCHEMY_ID }}
          REACT_APP_DEFAULT_CHAIN_ID: ${{ secrets.REACT_APP_DEFAULT_CHAIN_ID }}
          REACT_APP_DEFAULT_BASE_URL: ${{ secrets.REACT_APP_DEFAULT_BASE_URL }}
          REACT_APP_MAIN_MATIC_BASE_URL: ${{ secrets.REACT_APP_MAIN_MATIC_BASE_URL }}
          REACT_APP_TEST_MATIC_BASE_URL: ${{ secrets.REACT_APP_TEST_MATIC_BASE_URL }}
          REACT_APP_MAIN_ETHERIUM_BASE_URL: ${{ secrets.REACT_APP_MAIN_ETHERIUM_BASE_URL }}

      - name: Archive Production Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: build

  deploy-gcr:
    needs: [setup, build]
    name: Deploy to GCR - ${{ needs.setup.outputs.ENVIRONMENT }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@main

      - name: 'Debugging variables'
        run: |
          echo "SERVICE_NAME: ${{ needs.setup.outputs.SERVICE_NAME }}"
          echo "GITHUB_SHA: $GITHUB_SHA"

      - name: Download Artifact
        uses: actions/download-artifact@main
        with:
          name: build
          path: build

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCR_SA_KEY }}'
          project_id: '${{ secrets.GCR_PROJECT }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Docker build'
        run: 'docker build -t gcr.io/$PROJECT_ID/${{ needs.setup.outputs.SERVICE_NAME }}:$GITHUB_SHA .'

      - name: 'Gcloud auth configure-docker'
        run: 'gcloud auth configure-docker'

      - name: 'Docker push to GCR'
        run: 'docker push gcr.io/$PROJECT_ID/${{ needs.setup.outputs.SERVICE_NAME }}:$GITHUB_SHA'

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ needs.setup.outputs.SERVICE_NAME }}
          region: ${{ env.RUN_REGION }}
          image: 'gcr.io/${{ env.PROJECT_ID }}/${{ needs.setup.outputs.SERVICE_NAME }}:${{ github.sha }}'
